##################################
#                                #
#            Variables           #
#                                #
##################################

$app_stage     = "<%= app_stage %>"
$app_domain    = "<%= app_domain %>"
$site_domain   = "<%= site_domain %>"
$app_deploy_to = "<%= app_deploy_to %>"
$app_name      = "<%= app_name %>"
$app_user      = "<%= app_user %>"
$app_group     = "<%= app_group %>"

# random minute for cron
$random_minute = "<%= rand(60) %>"

<%
config_path    = "/home/deploy/tmp/#{app_name}/#{app_stage}"
%>
$config_path = "<%= config_path %>"


##################################
#                                #
#          Defines               #
#                                #
##################################

##################################
#                                #
#          Cron Job              #
#                                #
##################################

# Thanks to <http://linuxman.wikispaces.com/Creating+a+cron+job+with+puppet>
# Call with enable => "false" to delete the job.

define cron_job( $enable = "true", $interval = "daily", $script = "", $package = "" ) {
        file { "/etc/cron.$interval/$name":
                content         => $script,
                ensure          => $enable ? {
                        "false" => absent,
                        default => file,
                },
                force           => true,
                owner           => root,
                group           => root,
                mode            => $interval ? {
                        "d"     => 644,
                        default => 755,
                },
                require         => $package ? {
                        ""      => undef,
                        default => Package[$package],
                },
        }
}

#################################################
#                                               #
# Custom command to set up Varnish enabled rule #
#                                               #
#################################################

define vcl_rules( $app_name, $procedure, $enabled = true ) {
        exec { "create-${name}-vcl-rules":
                unless => "/bin/grep 'include \"/etc/varnish/sites/${app_name}/${procedure}.vcl\";' /etc/varnish/sites-${procedure}.vcl", 
                command => "/bin/echo 'include \"/etc/varnish/sites/${app_name}/${procedure}.vcl\";' | /usr/bin/tee -a /etc/varnish/sites-${procedure}.vcl",
		provider => shell,
        }
}



##################################
#                                #
#     Vagrant DNS override       #
#                                #
##################################

<% if app_stage == "dev" %>
file { "/etc/resolv.conf":
	owner => root,
	group => root,
	mode => 644,
	source => "<%= config_path %>/scripts/modules/vagrant_resolv.conf"
}
<% end %>


##################################
#                                #
#      Users, groups and dirs    #
#                                #
##################################

##################################
#                                #
#          Create groups         #
#                                #
##################################

group { "<%= app_user %>-homerw":
	ensure => present,
}

group { "<%= app_group %>":
	ensure => present,
}


##################################
#                                #
#          Create users          #
#                                #
##################################

<% if app_stage == "dev" %>
user { "vagrant":
        ensure => present,
        gid => "<%= app_group %>",
        groups => ["<%= app_user %>-homerw","<%= app_group %>"],
        membership => minimum,
}
<% end %>

user { "www-data":
	ensure => present,
	groups => ["<%= app_user %>-homerw"],
	membership => minimum,
}

<% app_access_users.each do |access_user| %>
user { "<%= access_user %>":
	ensure => present,

	<% if access_user == app_user %>
	groups => ["<%= app_user %>-homerw", "<%= app_group %>"],
	gid => "<%= app_group %>",
	password => "*", # prevent password login entirely

	<% else %>
	groups => ["<%= app_user %>-homerw","<%= app_group %>"],
	<% end %>

	membership => minimum,
}
<% end %>

##################################
#                                #
#     Create home directories    #
#                                #
##################################

file { "/home/<%= app_user %>":
	ensure => directory,
	owner => <%= app_user %>,
	group => <%= app_user %>-homerw,
	<% if app_stage == "dev" %>
	mode => 755,
	<% else %>
	mode => 770,
	<% end %>
}

# bin directory
file { "/home/<%= app_user %>/bin":
        ensure => directory,
        owner => <%= app_user %>,
        group => <%= app_group %>,
        mode => 775,
}


##################################
#                                #
#       Nginx configuration      #
#                                #
##################################

##################################
#                                #
#         nginx package          #
#                                #
##################################

package { "nginx":
        ensure => installed,
#       hasrestart => true
}

##################################
#                                #
#         nginx configs          #
#                                #
##################################

file { "/etc/nginx/sites-available/<%= app_name %>":
        ensure => directory,
        owner => root,
        group => root,
        mode => 755
}

file { "/etc/nginx/sites-available/<%= app_name %>/<%= app_stage %>":
        owner => root,
        group => root,
        mode  => 644,
        content => template("<%= config_path %>/nginx/default.erb"),
        require => Package["nginx"],
        notify => Service["nginx"]
}

file { "/etc/nginx/sites-enabled/<%= app_name %>-<%= app_stage %>":
        ensure => symlink,
        target => "/etc/nginx/sites-available/<%= app_name %>/<%= app_stage %>",
        require => Package["nginx"],
        notify => Service["nginx"]
}



file { "/etc/nginx/sites-enabled/default":
        ensure => absent,
        #require => Package["nginx"],
        #notify => Package["nginx"]
}

##################################
#                                #
#       enable the service       #
#                                #
##################################

service { "nginx":
        ensure => running,
        #hasrestart => true,
        require => Package["nginx"],
	restart => "/usr/sbin/nginx -t && /usr/sbin/service nginx reload"
}

##################################
#                                #
#        PHP configuration       #
#                                #
##################################

<%= render "#{modules_path}/php5-fpm.erb", binding %>
<%= render "#{modules_path}/php-logging.erb", binding %>


##################################
#                                #
#            Varnish             #
#                                #
##################################

package { "varnish":
        ensure => installed
}

<% if app_stage == "dev" %>
# varnish config file for :80
file { "/etc/default/varnish":
        owner => root,
        group => root,
		source => "<%= config_path %>/varnish/modules/vagrant_etc_default_varnish",
        require => Package["varnish"]
}
<% end %>

file { "/etc/varnish/default.vcl":
        owner => root,
        group => root,
        source => "<%= config_path %>/varnish/modules/global/default.vcl",
        require => Package["varnish"]
}

# prerequisite directories and files for Varnish modular configuration
file { "/etc/varnish/sites":
	ensure => directory,
	owner => root,
	group => root
}

file { "/etc/varnish/sites-recv.vcl":
	ensure => present,
	owner => root,
	group => root
}

file { "/etc/varnish/sites-fetch.vcl":
	ensure => present,
	owner => root,
	group => root
}

file { "/etc/varnish/sites/<%= app_name %>": 
	ensure => directory,
	owner => root,
	group => root
}

# drop in this site's varnish configurations
file { "/etc/varnish/sites/<%= app_name %>/recv.vcl":
	ensure => file,
	owner => root,
	group => root,
	content => template("<%= config_path %>/varnish/recv.vcl.erb"),
}

file { "/etc/varnish/sites/<%= app_name %>/fetch.vcl":
        ensure => file,
        owner => root,
        group => root,
        content => template("<%= config_path %>/varnish/fetch.vcl.erb"),
}

# now enable those VCLs in the sites-*.vcl files
vcl_rules { "<%= app_name %>-recv":
	app_name => "<%= app_name %>",
	procedure => "recv",
	notify => Service["varnish"]
}

vcl_rules { "<%= app_name %>-fetch":
	app_name => "<%= app_name %>",
	procedure => "fetch",
	notify => Service["varnish"]
}

# start varnish
service { "varnish":
        ensure => running,
        require => Package["varnish"],
        <% if app_stage == "dev" %>
        subscribe => [File["/etc/default/varnish"],File["/etc/varnish/default.vcl"]],
        <% end %>
}
